version: "3"

tasks:
    up:
        desc: "Start the Docker Compose services"
        dir: "{{.USER_WORKING_DIR}}"
        preconditions:
            - test -f docker-compose.yaml
        cmds:
            - docker-compose up -d
    down:
        desc: "Stop the Docker Compose services"
        dir: "{{.USER_WORKING_DIR}}"
        preconditions:
            - test -f docker-compose.yaml
        cmds:
            - docker-compose down
    kafka:list-topics:
        desc: "Create a Kafka topic"
        dir: "{{.USER_WORKING_DIR}}"
        cmds:
            - docker exec -it kafka kafka-topics.sh --bootstrap-server localhost:9092 --list
    kafka:create-topic:
        desc: "Create a Kafka topic (usage: task kafka:create-topic name=topic-name partitions=1)"
        dir: "{{.USER_WORKING_DIR}}"
        vars:
            partitions: '{{.partitions | default "1"}}'
        requires:
            vars: [topic]
        cmds:
            - docker exec -it kafka kafka-topics.sh --bootstrap-server localhost:9092 --create --topic {{.topic}} --partitions {{.partitions}} --replication-factor 1 --config retention.ms=86400000 --config retention.bytes=1073741824
    kafka:produce-message:
        desc: "Send a message to a Kafka topic (usage: task kafka:produce-message topic='name' mensagem='text')"
        requires:
            vars: [topic, message]
        cmds:
            - |
                echo "{{.message}}" | docker exec -i kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic {{.topic}}
    kafka:produce-message-with-key:
        desc: "Send a message to a Kafka topic (usage: task kafka:produce-message topic='name' mensagem='key:text')"
        requires:
            vars: [topic, message]
        cmds:
            - |
                echo "{{.message}}" | docker exec -i kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic {{.topic}} --property "parse.key=true" --property "key.separator=:"
    kafka:consume:
        desc: "Consumes messages on a Kafka topic (usage: task kafka:consume-one topic=name)"
        requires:
            vars: [topic]
        cmds:
            - docker exec -it kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic {{.topic}} --from-beginning
    kafka:consume-group:
        desc: "Conusmes messages with a consumer gorups (usage: task kafka:consume-group topic=topic group=group)"
        requires:
            vars: [topic, group]
        cmds:
            - docker exec -it kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic {{.topic}} --group {{.group}} --from-beginning
    kafka:delete-topic:
        desc: "Delete a Kafka topic (usage: task kafka:delete-topic topic=topic-name)"
        requires:
            vars: [topic]
        cmds:
            - docker exec -it kafka kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic {{.topic}}
    kafka:recreate-topic:
        desc: "Recreatee a Kafka topic (usage: task kafka:recreate-topic topic=topic-name)"
        vars:
            partitions: '{{.partitions | default "1"}}'
        requires:
            vars: [topic]
        cmds:
            - task kafka:delete-topic topic={{.topic}}
            - task kafka:create-topic topic={{.topic}} partitions={{.partitions}}
    docs:quickstart:
        desc: "Generate quickstart documentation for the project"
        dir: "{{.USER_WORKING_DIR}}"
        cmds:
            - sphinx-quickstart docs
    docs:generate:
        desc: "Generate documentation for the project"
        dir: "{{.USER_WORKING_DIR}}/docs"
        cmds:
            - sphinx-apidoc -o source/ ../ufvrag
            - echo "\n   modules.rst" >> source/index.rst
            - make html
    rag:seeder:
        desc: "Start seeding"
        dir: "{{.USER_WORKING_DIR}}"
        requires:
            vars: [url]
        vars:
            url: '{{.url | default "https://www.ufv.br" }}'
        cmds:
            - python -m ufvrag.seeder --url {{.url}}
    rag:crawl:
        desc: "Crawl"
        dir: "{{.USER_WORKING_DIR}}"
        cmds:
            - python -m ufvrag.webcrawler
    rag:builder:
        desc: "Start seeding"
        dir: "{{.USER_WORKING_DIR}}"
        cmds:
            - python -m ufvrag.rag.builder
    qdrant:search:
        desc: "Search vector in Qdrant"
        vars:
            size: '{{.size | default "10" }}'
        requires:
            vars: [collection]
        cmds:
            - |
                curl -X POST http://localhost:6333/collections/{{.collection}}/points/search \
                -H 'Content-Type: application/json' \
                -d '{"limit": {{.size}} }'
    qdrant:count:
        desc: "Count"
        requires:
            vars: [collection]
        cmds:
            - curl -s http://localhost:6333/collections/{{.collection}}
    qdrant:clear:
        desc: "Clear"
        requires:
            vars: [collection]
        cmds:
            - |
                curl -X POST http://localhost:6333/collections/{{.collection}}/points/delete \
                -H "Content-Type: application/json" \
                -d '{ "filter": { "must": [] } }'
    qdrant:create:
        desc: "Create"
        vars:
            size: '{{.size | default "4096"}}'
        requires:
            vars: [name]
        cmds:
            - |
                curl -X PUT http://localhost:6333/collections/{{.name}} \
                -H "Content-Type: application/json" \
                -d '{
                    "vectors": {
                        "size": {{.size}},
                        "distance": "Cosine"
                    }
                }'
    qdrant:delete:
        desc: "Delete"
        requires:
            vars: [collection]
        cmds:
            - curl -X DELETE http://localhost:6333/collections/{{.collection}}
